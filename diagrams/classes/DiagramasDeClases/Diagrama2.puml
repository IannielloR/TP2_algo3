@startuml
'https://plantuml.com/class-diagram

class Juego{
- boolean llegada
+ Juego( TipoVehiculo vehiculo)
+ Juego( TipoVehiculo vehiculo, int maxPosX, int maxPosY)
+ crearMeta() : void
+ agregarMeta( int posY ) : void
+ crearInterferencias() : void
+ moverVehiculoArriba() : void
+ moverVehiculoAbajo() : void
+ moverVehiculoIzquierda() : void
+ moverVehiculoDerecha() : void
+ getLlegada() : boolean
+ getMovimientos() : int
}

class Mapa{
- int maximoX
- int maximoY
- int posVehiculoX
- int posVehiculoY
- List<Interferencia> interferencias
- Vehiculo vehiculo
+ Mapa( TipoVehiculo : vehiculo, int maxPosX, int maxPosY)
+ devolverMovimientos() : int
+ moverVehiculoArriba() : void
+ moverVehiculoAbajo() : void
+ moverVehiculoIzquierda() : void
+ moverVehiculoDerecha() : void
+ revisarObstaculos( int posX, int posY ) : boolean
+ agregarInterferenciaAMapa( int posicion, Interferencia interferencia ) : void
+ crearMeta( Random random ) : void
+ agregarMeta( int posY ) : void
+ verificarMeta() : boolean
}

class Meta{
- int posX
- int posY
+ Meta( int posX, int posY )
+ verificarMeta( int posVehiculoX, int posVehiculoY ) : boolean
}

class Random{
- int maximoX
- int maximoY
+ Random()
+ Random( int maximoX, int maximoY )
+ generarXInicial() : int
+ generarYInicial() : int
+ generarXFinal( int inicialX ) : int
+ generarYFinal( int inicialY ,int inicialX, int finalX ) : int
+ generarInt( int numeroMaximo ) : int
+ generarFloat() : float
}


Juego "1" --> "1" Mapa
Mapa "1" --> "1" Meta
Juego "1" --> "1" Random
Mapa "1" --> "1" Random


@enduml